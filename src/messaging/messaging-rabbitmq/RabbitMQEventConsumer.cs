using EasyNetQ;
using Microsoft.Extensions.Logging;
using ReadModel;
using Todo.Events;

namespace Messaging.RabbitMQ
{
    /// <summary>
    /// Class responsible for consuming events generated by RabbitMQ, and update the read model
    /// accordingly.
    /// </summary>
    public class RabbitMQEventConsumer
    {
        private readonly ITodoListSynchronizer synchronizer;
        private readonly ILogger<RabbitMQEventConsumer> logger;

        public RabbitMQEventConsumer(
            ITodoListSynchronizer synchronizer,
            ILogger<RabbitMQEventConsumer> logger,
            IBus bus)
        {
            this.synchronizer = synchronizer;
            this.logger = logger;

            bus.Subscribe<TodoAdded>("read_model_synchronizer", OnAdded);
            bus.Subscribe<TodoRenamed>("read_model_synchronizer", OnRenamed);
            bus.Subscribe<TodoCompleted>("read_model_synchronizer", OnCompleted);
            bus.Subscribe<TodoIncompleted>("read_model_synchronizer", OnIncompleted);
            bus.Subscribe<TodoRemoved>("read_model_synchronizer", OnRemoved);
        }

        private void OnAdded(TodoAdded e)
        {
            Log(e);

            synchronizer.Add(e.Id, e.Title);
        }

        private void OnRenamed(TodoRenamed e)
        {
            Log(e);

            synchronizer.Rename(e.Id, e.NewTitle);
        }

        private void OnCompleted(TodoCompleted e)
        {
            Log(e);

            synchronizer.SetCompleted(e.Id, true);
        }

        private void OnIncompleted(TodoIncompleted e)
        {
            Log(e);

            synchronizer.SetCompleted(e.Id, false);
        }

        private void OnRemoved(TodoRemoved e)
        {
            Log(e);

            synchronizer.Remove(e.Id);
        }

        private void Log<T>(T e)
        {
            logger.LogInformation("Consume {event}", e);
        }
    }
}
