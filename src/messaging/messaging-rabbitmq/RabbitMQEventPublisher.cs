using Cqrs;
using EasyNetQ;
using Microsoft.Extensions.Logging;
using Todo.Events;

namespace Messaging.RabbitMQ
{
    /// <summary>
    /// Class responsible for publishing events generated by aggregates using RabbitMQ.
    /// </summary>
    public class RabbitMQEventPublisher :
        IPublisher<TodoAdded>,
        IPublisher<TodoRenamed>,
        IPublisher<TodoCompleted>,
        IPublisher<TodoIncompleted>,
        IPublisher<TodoRemoved>
    {
        private readonly IBus bus;
        private readonly ILogger<RabbitMQEventPublisher> logger;

        public RabbitMQEventPublisher(IBus bus, ILogger<RabbitMQEventPublisher> logger)
        {
            this.bus = bus;
            this.logger = logger;
        }

        public void Publish(TodoAdded e)
        {
            Publish<TodoAdded>(e);
        }

        public void Publish(TodoRenamed e)
        {
            Publish<TodoRenamed>(e);
        }

        public void Publish(TodoCompleted e)
        {
            Publish<TodoCompleted>(e);
        }

        public void Publish(TodoIncompleted e)
        {
            Publish<TodoIncompleted>(e);
        }

        public void Publish(TodoRemoved e)
        {
            Publish<TodoRemoved>(e);
        }

        private void Publish<T>(T e) where T : class
        {
            logger.LogInformation("Publish {event}", e);

            bus.Publish(e);
        }
    }
}
