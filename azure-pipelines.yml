jobs:

- job: logo
  displayName: Print Logo
  pool:
    vmImage: Ubuntu 16.04
  steps:
  - script: echo -e "$(curl --silent https://raw.githubusercontent.com/FantasticFiasco/logo/master/logo.raw)"

- job: build
  displayName: Build Solutions
  pool:
    vmImage: Ubuntu 16.04
  steps:
  - bash: dotnet build 0.All.sln --configuration Release
    displayName: Build 0.All.sln
  - bash: dotnet build 1.InMemoryEventStore.InMemoryReadModel.sln --configuration Release
    displayName: Build 1.InMemoryEventStore.InMemoryReadModel.sln
  - bash: dotnet build 2.SqlEventStore.InMemoryReadModel.sln --configuration Release
    displayName: Build 2.SqlEventStore.InMemoryReadModel.sln
  - bash: dotnet build 3.NoSqlEventStore.InMemoryReadModel.sln --configuration Release
    displayName: Build 3.NoSqlEventStore.InMemoryReadModel.sln
  - bash: dotnet build 4.NoSqlEventStore.NoSqlReadModel.sln --configuration Release
    displayName: Build 4.NoSqlEventStore.NoSqlReadModel.sln
  - bash: dotnet build 5.Distributed.NoSqlEventStore.NoSqlReadModel.sln --configuration Release
    displayName: Build 5.Distributed.NoSqlReadModel.sln

- job: test
  displayName: Test
  pool:
    vmImage: Ubuntu 16.04
  steps:
  - task: DotNetCoreCLI@2
    inputs:
      command: test
      projects: "**/*.Test.csproj"
      arguments: --configuration Release

- job: e2e_lint
  displayName: E2E Lint
  pool:
    vmImage: Ubuntu 16.04
  steps:
  - bash: |
      cd ./test/e2e
      yarn
      yarn lint
    displayName: Run lint

- job: e2e_inmemory_eventstore_inmemory_readmodel
  displayName: E2E In-Memory Event Store / In-Memory Read Model
  pool:
    vmImage: Ubuntu 16.04
  steps:
  - bash: docker-compose -f ./docker-compose.1.in-memory-event-store.in-memory-readmodel.yml up --build --detach
  - bash: |
      cd ./test/e2e
      yarn
      yarn test
  - bash: docker-compose -f ./docker-compose.1.in-memory-event-store.in-memory-readmodel.yml down
    displayName: Run e2e tests

- job: e2e_sql_eventstore_inmemory_readmodel
  displayName: E2E SQL Event Store / In-Memory Read Model
  pool:
    vmImage: Ubuntu 16.04
  steps:
  - bash: docker-compose -f ./docker-compose.2.sql-event-store.in-memory-readmodel.yml up --build --detach
  - bash: |
      cd ./test/e2e
      yarn
      yarn test
  - bash: docker-compose -f ./docker-compose.2.sql-event-store.in-memory-readmodel.yml down
    displayName: Run e2e tests

- job: e2e_nosql_eventstore_inmemory_readmodel
  displayName: E2E NoSQL Event Store / In-Memory Read Model
  pool:
    vmImage: Ubuntu 16.04
  steps:
  - bash: docker-compose -f ./docker-compose.3.no-sql-event-store.in-memory-readmodel.yml up --build --detach
  - bash: |
      cd ./test/e2e
      yarn
      yarn test
  - bash: docker-compose -f ./docker-compose.3.no-sql-event-store.in-memory-readmodel.yml down
    displayName: Run e2e tests

- job: e2e_nosql_eventstore_nosql_readmodel
  displayName: E2E NoSQL Event Store / NoSQL Read Model
  pool:
    vmImage: Ubuntu 16.04
  steps:
  - bash: docker-compose -f ./docker-compose.4.no-sql-event-store.no-sql-readmodel.yml up --build --detach
  - bash: |
      cd ./test/e2e
      yarn
      yarn test
  - bash: docker-compose -f ./docker-compose.4.no-sql-event-store.no-sql-readmodel.yml down
    displayName: Run e2e tests

- job: e2e_distributed_nosql_eventstore_nosql_readmodel
  displayName: E2E Distributed NoSQL Event Store / NoSQL Read Model
  pool:
    vmImage: Ubuntu 16.04
  steps:
  - bash: docker-compose -f ./docker-compose.5.distributed.no-sql-event-store.no-sql-readmodel.yml up --build --detach
  - bash: |
      cd ./test/e2e
      yarn
      yarn test
  - bash: docker-compose -f ./docker-compose.5.distributed.no-sql-event-store.no-sql-readmodel.yml down
    displayName: Run e2e tests
