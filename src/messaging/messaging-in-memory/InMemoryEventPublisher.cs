using System;
using Cqrs;
using Microsoft.Extensions.Logging;
using Todo.Events;

namespace Messaging.InMemory
{
    /// <summary>
    /// Class responsible for publishing events generated by aggregates using ordinary .NET events.
    /// </summary>
    public class InMemoryEventPublisher :
        IPublisher<TodoAdded>,
        IPublisher<TodoRenamed>,
        IPublisher<TodoCompleted>,
        IPublisher<TodoIncompleted>,
        IPublisher<TodoRemoved>
    {
        private readonly ILogger<InMemoryEventPublisher> logger;

        public InMemoryEventPublisher(ILogger<InMemoryEventPublisher> logger)
        {
            this.logger = logger;
        }

        public event EventHandler<TodoAdded> TodoAdded;

        public event EventHandler<TodoRenamed> TodoRenamed;

        public event EventHandler<TodoCompleted> TodoCompleted;

        public event EventHandler<TodoIncompleted> TodoIncompleted;

        public event EventHandler<TodoRemoved> TodoRemoved;

        public void Publish(TodoAdded e)
        {
            Log(e);

            TodoAdded?.Invoke(this, e);
        }

        public void Publish(TodoRenamed e)
        {
            Log(e);

            TodoRenamed?.Invoke(this, e);
        }

        public void Publish(TodoCompleted e)
        {
            Log(e);

            TodoCompleted?.Invoke(this, e);
        }

        public void Publish(TodoIncompleted e)
        {
            Log(e);

            TodoIncompleted?.Invoke(this, e);
        }

        public void Publish(TodoRemoved e)
        {
            Log(e);

            TodoRemoved?.Invoke(this, e);
        }

        private void Log<T>(T e)
        {
            logger.LogInformation("Publish {event}", e);
        }
    }
}
